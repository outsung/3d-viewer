{"version":3,"sources":["constants/color.ts","component/CheckBox/style.ts","component/CheckBox/index.tsx","component/Buttons/style.ts","component/Buttons/index.tsx","utils/Controls.tsx","component/ModelViwer/index.tsx","loader/index.ts","Screen/Upload/style.ts","Screen/Upload/index.tsx","utils/browserHistory.ts","Routes/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["color","mainColor","lightMainColor","black","white","storke","lightGray","gray","CheckBoxStyle","styled","div","size","check","CheckBox","onClick","TextButton","hoverColor","Controls","React","forwardRef","ref","props","useState","autoRotate","setAutoRotate","camera","useThree","useImperativeHandle","OrbitControls","ModelViewer","Scene","_ref","current","model","setModel","setCamera","useCallback","cameraInfo","console","log","position","x","y","z","rotateX","rotate","rotateY","rotateZ","loadModel","a","fileURL","rootPath","file","type","baseURL","THREE","extractUrlBase","load","scene","error","intensity","scale","object","roughness","Promise","resolve","reject","manager","setURLModifier","url","blobURL","URL","createObjectURL","blobURLs","push","loader","typeIndex","gltf","fbx","obj","GLTFLoader","setCrossOrigin","setDRACOLoader","DRACOLoader","setDecoderPath","FBXLoader","OBJLoader","getLoader","scenes","traverse","child","isMesh","castShadow","receiveShadow","Error","forEach","revokeObjectURL","undefined","Screen","HtmlInterface","UploadInput","input","CardDescription","CardBox","SettingMenu","SettingItemBox","UploadScreen","uploadInputRef","useRef","modelViewerRef","labels","setLabels","labelCountRef","style","margin","marginBottom","length","rotation","newLabel","name","Math","round","random","toString","prev","onAddLabels","display","flexDirection","gap","map","label","i","LabelItem","cameraMoveForLabel","onDelete","index","filter","p","onChange","event","target","files","fileName","findIndex","match","b","getTypeOfFileUpload","alert","rootFile","value","replace","accept","click","SettingItem","text","ischeck","alignItems","flex","justifyContent","padding","cursor","initialState","setCheck","_onClick","flexGrow","createBrowserHistory","basename","process","Routes","history","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAUeA,EAVD,CACZC,UAAW,UACXC,eAAgB,UAChBC,MAAO,OACPC,MAAO,OACPC,OAAQ,OACRC,UAAW,UACXC,KAAM,WCCKC,EAAgBC,IAAOC,IAAV,qNACJV,EAAMG,OAGjB,qBAAGQ,QACF,qBAAGA,QAKS,qBAAGC,MAAqBZ,EAAMC,UAAYD,EAAMI,S,OCdjE,SAASS,EAAT,GAAiE,IAA7CD,EAA4C,EAA5CA,MAAOD,EAAqC,EAArCA,KAAMG,EAA+B,EAA/BA,QACtC,OACE,cAACN,EAAD,CAAeG,KAAMA,EAAMC,MAAOA,EAAOE,QAASA,EAAlD,SACE,0BCAC,ICLMC,EDKkBN,IAAOC,IAAV,+PAKJV,EAAMO,MAIR,qBAAGP,SAInB,gBAAGgB,EAAH,EAAGA,WAAH,OACAA,EAAU,4BAAwBA,GAAxB,M,wDEIDC,EAjBEC,IAAMC,YAA4C,WAEjEC,GACC,IAFIC,EAEL,oBACA,EAAoCC,mBAASD,EAAME,YAAnD,mBAAOA,EAAP,KAAmBC,EAAnB,KACQC,EAAWC,cAAXD,OAUR,OARAE,8BACEP,GACA,iBAAO,CACLI,cAAeA,KAEjB,IAGK,cAACI,EAAA,EAAD,CAAeL,WAAYA,EAAYE,OAAQA,O,gCCRxD,I,cAuCeI,EAvCKX,IAAMC,YACxB,SAAUE,EAAOD,GACf,OACE,mCACE,eAAC,IAAD,WAEE,cAACU,EAAD,CACEV,IAAK,SAACW,GACAX,GAAO,YAAaA,IACtBA,EAAIY,QAAUZ,EAAIY,QAAJ,2BAELZ,EAAIY,SACJD,GAELA,MAMV,cAAC,EAAD,CACEX,IAAK,SAACW,GACAX,GAAO,YAAaA,IACtBA,EAAIY,QAAUZ,EAAIY,QAAJ,2BAELZ,EAAIY,SACJD,GAELA,IAGRR,YAAY,IAEd,uCAuBJO,EAAQX,sBAAqB,SAAUE,EAAOD,GAClD,MAA0BE,mBAAuB,MAAjD,mBAAOW,EAAP,KAAcC,EAAd,KACQT,EAAWC,cAAXD,OAEFU,EAAYC,uBAChB,SAACC,GACCC,QAAQC,IAAI,eAAgB,CAAEd,SAAQY,eACtCZ,EAAOe,SAASC,EAAIJ,EAAWG,SAAS,GACxCf,EAAOe,SAASE,EAAIL,EAAWG,SAAS,GACxCf,EAAOe,SAASG,EAAIN,EAAWG,SAAS,GAExCf,EAAOmB,QAAQP,EAAWQ,OAAO,IACjCpB,EAAOqB,QAAQT,EAAWQ,OAAO,IACjCpB,EAAOsB,QAAQV,EAAWQ,OAAO,MAEnC,CAACpB,IAGGuB,EAAYZ,sBAAW,uCAC3B,uCAAAa,EAAA,6DAASC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,KAC1BC,EAAUC,cAAkBC,eAAeN,GADnD,kBAKwBO,EAAK,CAAEP,UAASC,WAAUC,OAAMC,OAAMC,YAL9D,OAKUI,EALV,OAMIpB,QAAQC,IAAIN,EAAOyB,GACnBxB,EAASwB,GAPb,kDASIpB,QAAQqB,MAAR,KAAiB,KATrB,4FAD2B,sDAe3B,CAAC1B,IAUH,OAPAN,8BAAoBP,GAAK,iBAAO,CAAEK,SAAQU,YAAWa,YAAWf,WAAU,CACxER,EACAU,EACAa,EACAf,IAIA,qCAEE,4BAAYO,SAAU,CAAC,EAAG,EAAG,GAAIoB,UAAW,MAC5C,8BAAcA,UAAW,MAGxB3B,EACC,uBAAOb,IAAKA,EAAKyC,MAAO,KAAxB,SACE,2BAAWC,OAAQ7B,MAGrB,uBAAMnB,QAAS,aAAf,UACE,sCACA,sCAAsBiD,UAAW,GAAK/D,MAAOA,EAAMC,qBAUvDwD,EAAO,SAAC,GAA2D,IAAzDP,EAAwD,EAAxDA,QAAmBE,GAAqC,EAA/CD,SAA+C,EAArCC,MAAMC,EAA+B,EAA/BA,KAA+B,EAAzBC,QAC7C,OAAO,IAAIU,SAAe,SAACC,EAASC,GAClC,IAAMC,EAAU,IAAIZ,iBAEpBY,EAAQC,gBAAe,SAACC,GAKtB,IAAMC,EAAUC,IAAIC,gBAAgBpB,GAGpC,OAFAqB,EAASC,KAAKJ,GAEPD,KAGT,IAAMM,EC3IH,YAMH,IALFtB,EAKC,EALDA,KACAc,EAIC,EAJDA,QAKMS,EAAY,CAAEC,KAAM,EAAGC,IAAK,EAAGC,IAAK,GAAI1B,GAU9C,MARa,CACX,IAAI2B,IAAWb,GACZc,eAAe,aACfC,eAAe,IAAIC,IAAYhB,GAASiB,eAAe,iBAC1D,IAAIC,IAAUlB,GAASc,eAAe,aACtC,IAAIK,IAAUnB,GAASc,eAAe,cACtCL,GD4HeW,CAAU,CAAElC,OAAMc,YAC3BM,EAAkB,GAExBE,EAAOlB,KACLP,GACA,SAACjB,GACCK,QAAQC,IAAI,CAAEN,UACd,IAAMyB,GAAa,OAALzB,QAAK,IAALA,OAAA,EAAAA,EAAOuD,QAASvD,EAAMyB,OAASzB,EAAMuD,OAAO,GAAKvD,EAe/D,GAbAyB,EAAM+B,UAAS,SAACC,GACVA,EAAMC,SACRD,EAAME,YAAa,EACnBF,EAAMG,eAAgB,OAUrBnC,EAEH,MAAM,IAAIoC,MACR,sKAIJrB,EAASsB,QAAQxB,IAAIyB,iBAGrB/B,EAAQP,UAEVuC,EACA/B,OExLOgC,EAASzF,IAAOC,IAAV,8GAONyF,EAAgB1F,IAAOC,IAAV,6FAOb0F,EAAc3F,IAAO4F,MAAV,8CAIXC,EAAkB7F,IAAOC,IAAV,kEAEjBV,EAAMG,OAGJoG,EAAU9F,IAAOC,IAAV,uGAMP8F,EAAc/F,IAAOC,IAAV,0BACX+F,EAAiBhG,IAAOC,IAAV,wHCbZ,SAASgG,IACtB,IAAMC,EAAiBC,iBAAyB,MAC1CC,EAAiBD,iBAAuB,MAC9C,EAA4BtF,mBAAkB,IAA9C,mBAAOwF,EAAP,KAAeC,EAAf,KACMC,EAAgBJ,iBAAO,GAuF7B,OACE,eAACV,EAAD,WACE,eAACC,EAAD,WACE,eAACI,EAAD,CAASU,MAAO,CAAEC,OAAQ,OAA1B,UACE,eAACZ,EAAD,WACE,0CACA,wIACA,iJAGF,gCACE,cAACvF,EAAD,CACEkG,MAAO,CAAEE,aAAcL,EAAOM,OAAS,EAAI,OAAS,OACpDpH,MAAOA,EAAME,eACbY,QAAS,kBArCD,WAAO,IAAD,EAClBW,EAAM,UAAGoF,EAAe7E,eAAlB,aAAG,EAAwBP,OACvC,GAAIA,EAAQ,CACV,IAAQ4F,EAAuB5F,EAAvB4F,SAAU7E,EAAaf,EAAbe,SAElBwE,EAAchF,SAAW,EACzB,IAAMsF,EAAW,CACfC,KAAK,wBAAD,OAAWP,EAAchF,QAAzB,KACJQ,SAAU,CAACA,EAASC,EAAGD,EAASE,EAAGF,EAASG,GAC5CE,OAAQ,CAACwE,EAAS5E,EAAG4E,EAAS3E,EAAG2E,EAAS1E,GAC1C3C,MAAO,IAAMwH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KAE7DZ,GAAU,SAACa,GAAD,4BAAcA,GAAd,CAAoBN,QAyBPO,IAHjB,sCAOA,qBACEZ,MAAO,CACLa,QAAS,OACTC,cAAe,SACfC,IAAK,OAJT,SAOGlB,EAAOmB,KAAI,SAACC,EAAOC,GAAR,OACV,cAACC,EAAD,CAEEF,MAAOA,EACPpH,QAAS,kBAlCE,SAACoH,GAAkB,IAAD,KAC3C,UAAArB,EAAe7E,eAAf,eAAwBG,aAAxB,UACE0E,EAAe7E,eADjB,OACE,EAAwBG,UAAU+F,IAgCPG,CAAmBH,IAClCI,SAAU,kBAtCFC,EAsCuBJ,OArC7CpB,GAAU,SAACa,GAAD,OAAUA,EAAKY,QAAO,SAACC,EAAGN,GAAJ,OAAUA,IAAMI,QAD3B,IAACA,IAmCHJ,cAUf,eAAC5B,EAAD,CAASU,MAAO,CAAEC,OAAQ,OAA1B,UACE,eAACZ,EAAD,WACE,0CACA,iLACA,6IAGF,cAACF,EAAD,CACEhF,IAAKuF,EACL+B,SAnImD,SAACC,GAC5D,IAAMvF,EAAOuF,EAAMC,OAAOC,MAAQF,EAAMC,OAAOC,MAAM,QAAK5C,EAoB1D,GAAI7C,EAAM,CAAC,IAAD,MACFC,EA4LL,SAA6ByF,GAClC,IAAMC,EAAY,CAChBD,EAASE,MAAM,iBACfF,EAASE,MAAM,UACfF,EAASE,MAAM,WACfD,WAAU,SAACE,GAAD,OAAOA,KACnB,OAAsB,IAAfF,EACF,CAAC,OAAQ,MAAO,OAAOA,GACxB,KApMaG,CAAoB9F,EAAKmE,MAGtC,GADAjF,QAAQC,IAAIc,EAAMD,EAAKmE,OAClBlE,EACH,OAAO8F,MAAM,0EAef,IAAMC,EAAWhG,EACXD,GACJ,UAAAwD,EAAe3E,eAAf,eAAwBqH,MAAMC,QAAQlG,EAAKmE,KAAM,MAAO,GAEpDrE,EAAUqB,IAAIC,gBAAgB4E,GAKpC9G,QAAQC,IAAI,CAAE6G,WAAUjG,cACxB,UAAA0D,EAAe7E,eAAf,eAAwBgB,aAAxB,UACE6D,EAAe7E,eADjB,OACE,EAAwBgB,UAAU,CAAEE,UAASC,WAAUC,OAAMC,UAL7DkB,IAAIyB,gBAAgB9C,KAqFhBG,KAAK,OACLkG,OAAO,4BAGT,cAACxI,EAAD,CACEf,MAAOA,EAAME,eACbY,QAAS,WAAO,IAAD,EACb,UAAA6F,EAAe3E,eAAf,SAAwBwH,QACxBlH,QAAQC,IAAI,uEAJhB,SAOU,0BAGZ,eAACgE,EAAD,CAASU,MAAO,CAAEC,OAAQ,OAA1B,UACE,eAACZ,EAAD,WACE,0CACA,2IAGF,cAACE,EAAD,UACE,cAACiD,EAAD,CACEC,KAAM,4BACN5I,QAAS,SAACmI,GAAO,IAAD,MACd3G,QAAQC,IACN,CAAEsE,eAAc,UAAEA,EAAe7E,eAAjB,aAAE,EAAwBR,eAC1C,CAAEmI,QAASV,KAEb,UAAApC,EAAe7E,eAAf,eAAwBR,iBAAxB,UACEqF,EAAe7E,eADjB,OACE,EAAwBR,cAAcyH,eASlD,cAAC,EAAD,CAAa7H,IAAKyF,OAgBxB,SAASuB,EAAT,GAAkE,IAA7CF,EAA4C,EAA5CA,MAAOpH,EAAqC,EAArCA,QAASwH,EAA4B,EAA5BA,SACnC,OACE,sBAAKrB,MAAO,CAAEa,QAAS,OAAQ8B,WAAY,UAA3C,UACE,cAAC7I,EAAD,CACEkG,MAAO,CAAE4C,KAAM,EAAGC,eAAgB,iBAClC9J,MAAOkI,EAAMlI,MACbc,QAAS,kBAAMA,KAHjB,SAKE,8BAAMoH,EAAMX,SAEd,qBACEzG,QAAS,kBAAMwH,KACfrB,MAAO,CACL8C,QAAS,kBACT/J,MAAO,MACPgK,OAAQ,WALZ,kBA8BN,SAASP,EAAT,GAIsB,IAHpBC,EAGmB,EAHnBA,KACA5I,EAEmB,EAFnBA,QAEmB,IADnBmJ,oBACmB,SACnB,EAA0B3I,mBAAS2I,GAAnC,mBAAOrJ,EAAP,KAAcsJ,EAAd,KAEMC,EAAW,WACfrJ,GAASF,GACTsJ,GAAUtJ,IAGZ,OACE,eAAC6F,EAAD,WACE,qBACEQ,MAAO,CAAEmD,SAAU,GACnBpK,MAAOA,EAAMC,UACba,QAAS,kBAAMqJ,KAHjB,SAKGT,IAEH,cAAC7I,EAAD,CAAUF,KAAM,GAAIG,QAAS,kBAAMqJ,KAAYvJ,MAAOA,O,YChR7CyJ,cAAqB,CAClCC,SAAUC,eCGG,SAASC,IACtB,OACE,cAAC,IAAD,CAAQC,QAASA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWlE,QCFhCmE,OAJf,WACE,OAAO,cAACL,EAAD,KCSMM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.24972864.chunk.js","sourcesContent":["const color = {\n  mainColor: \"#fd5c63\",\n  lightMainColor: \"#FF9A9A\",\n  black: \"#333\",\n  white: \"#fff\",\n  storke: \"#ddd\",\n  lightGray: \"#f7f7f7\",\n  gray: \"#9c9eb9\",\n};\n\nexport default color;\n","import styled from \"styled-components\";\nimport color from \"../../constants/color\";\n\nexport interface CheckBoxStyleProps {\n  check: boolean;\n  size: number;\n  onClick: () => void;\n}\nexport const CheckBoxStyle = styled.div<CheckBoxStyleProps>`\n  border: 1px solid ${color.black};\n  border-radius: 5px;\n  padding: 5px;\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n\n  & > div {\n    width: 100%;\n    height: 100%;\n    background-color: ${({ check }) => (check ? color.mainColor : color.white)};\n  }\n`;\n","import React from \"react\";\n\nimport { CheckBoxStyle, CheckBoxStyleProps } from \"./style\";\n\nexport function CheckBox({ check, size, onClick }: CheckBoxStyleProps) {\n  return (\n    <CheckBoxStyle size={size} check={check} onClick={onClick}>\n      <div />\n    </CheckBoxStyle>\n  );\n}\n","import styled from \"styled-components\";\nimport color from \"../../constants/color\";\n\ninterface TextButtonStyleProps {\n  color: string;\n  hoverColor?: string;\n}\nexport const TextButtonStyle = styled.div<TextButtonStyleProps>`\n  display: flex;\n  align-items: \"center\";\n  justify-content: \"center\";\n\n  border: 0.5px solid ${color.gray};\n  border-radius: 4px;\n  padding: 8px 12px;\n\n  background-color: ${({ color }) => color};\n\n  cursor: pointer;\n  & :hover {\n    ${({ hoverColor }) =>\n      hoverColor ? `background-color: ${hoverColor}` : ``};\n  }\n`;\n","import { TextButtonStyle } from \"./style\";\n\nexport const TextButton = TextButtonStyle;\n","import React, { useState } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { OrbitControls, OrbitControlsProps } from \"@react-three/drei\";\nimport { useImperativeHandle } from \"react\";\n\nexport interface ControlsRef {\n  setAutoRotate: React.Dispatch<React.SetStateAction<boolean | undefined>>;\n}\nconst Controls = React.forwardRef<ControlsRef, OrbitControlsProps>(function (\n  { ...props },\n  ref\n) {\n  const [autoRotate, setAutoRotate] = useState(props.autoRotate);\n  const { camera } = useThree();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setAutoRotate: setAutoRotate,\n    }),\n    []\n  );\n\n  return <OrbitControls autoRotate={autoRotate} camera={camera} />;\n});\nexport default Controls;\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport * as THREE from \"three\";\nimport { Group } from \"three\";\n\nimport { Canvas, useThree } from \"@react-three/fiber\";\n\nimport Controls, { ControlsRef } from \"../../utils/Controls\";\nimport color from \"../../constants/color\";\nimport { useCallback } from \"react\";\n\nimport { getLoader } from \"../../loader\";\nimport { LoaderType } from \"../../type/model\";\n\nexport type ModelViewerRef = Partial<SceneRef & ControlsRef>;\ninterface ModelViewerProps {}\nconst ModelViewer = React.forwardRef<ModelViewerRef, ModelViewerProps>(\n  function (props, ref) {\n    return (\n      <>\n        <Canvas>\n          {/* scene */}\n          <Scene\n            ref={(_ref) => {\n              if (ref && \"current\" in ref) {\n                ref.current = ref.current\n                  ? {\n                      ...ref.current,\n                      ..._ref,\n                    }\n                  : _ref;\n              }\n            }}\n          />\n\n          {/* utils */}\n          <Controls\n            ref={(_ref) => {\n              if (ref && \"current\" in ref) {\n                ref.current = ref.current\n                  ? {\n                      ...ref.current,\n                      ..._ref,\n                    }\n                  : _ref;\n              }\n            }}\n            autoRotate={false}\n          />\n          <gridHelper />\n        </Canvas>\n      </>\n    );\n  }\n);\nexport default ModelViewer;\n\nexport interface CameraInfo {\n  position: number[];\n  rotate: number[];\n}\ninterface LoadModelProps {\n  fileURL: string;\n  rootPath: string;\n  file: File;\n  type: LoaderType;\n}\ninterface SceneRef {\n  setCamera: (cameraInfo: CameraInfo) => void;\n  camera: THREE.Camera;\n  loadModel: (props: LoadModelProps) => void;\n}\nconst Scene = forwardRef<SceneRef>(function (props, ref) {\n  const [model, setModel] = useState<Group | null>(null);\n  const { camera } = useThree();\n\n  const setCamera = useCallback(\n    (cameraInfo: CameraInfo) => {\n      console.log(\"setCamera : \", { camera, cameraInfo });\n      camera.position.x = cameraInfo.position[0];\n      camera.position.y = cameraInfo.position[1];\n      camera.position.z = cameraInfo.position[2];\n\n      camera.rotateX(cameraInfo.rotate[0]);\n      camera.rotateY(cameraInfo.rotate[1]);\n      camera.rotateZ(cameraInfo.rotate[2]);\n    },\n    [camera]\n  );\n\n  const loadModel = useCallback(\n    async ({ fileURL, rootPath, file, type }: LoadModelProps) => {\n      const baseURL = THREE.LoaderUtils.extractUrlBase(fileURL);\n\n      // const clips = model.animations || [];\n      try {\n        const scene = await load({ fileURL, rootPath, file, type, baseURL });\n        console.log(model, scene);\n        setModel(scene);\n      } catch (e) {\n        console.error(e, \"e\");\n      }\n\n      return;\n    },\n    [model]\n  );\n\n  useImperativeHandle(ref, () => ({ camera, setCamera, loadModel, model }), [\n    camera,\n    setCamera,\n    loadModel,\n    model,\n  ]);\n\n  return (\n    <>\n      {/* light */}\n      <pointLight position={[3, 3, 3]} intensity={1.5} />\n      <ambientLight intensity={1.5} />\n\n      {/* model */}\n      {model ? (\n        <group ref={ref} scale={0.005}>\n          <primitive object={model} />\n        </group>\n      ) : (\n        <mesh onClick={() => {}}>\n          <boxBufferGeometry />\n          <meshStandardMaterial roughness={0.6} color={color.mainColor} />\n        </mesh>\n      )}\n    </>\n  );\n});\n\ninterface loadProps extends LoadModelProps {\n  baseURL: string;\n}\nconst load = ({ fileURL, rootPath, file, type, baseURL }: loadProps) => {\n  return new Promise<Group>((resolve, reject) => {\n    const manager = new THREE.LoadingManager();\n    // Intercept and override relative URLs.\n    manager.setURLModifier((url) => {\n      // URIs in a glTF file may be escaped, or not. Assume that assetMap is\n      // from an un-escaped source, and decode all URIs before lookups.\n      // See: https://github.com/donmccurdy/three-gltf-viewer/issues/146\n\n      const blobURL = URL.createObjectURL(file);\n      blobURLs.push(blobURL);\n\n      return url;\n    });\n\n    const loader = getLoader({ type, manager });\n    const blobURLs: any[] = [];\n\n    loader.load(\n      fileURL,\n      (model: any) => {\n        console.log({ model });\n        const scene = model?.scenes ? model.scene || model.scenes[0] : model;\n\n        scene.traverse((child: any) => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n          /* max to webgl 회전 보정 */\n          // if (child.isGroup) {\n          //   child.rotation.x = Math.PI;\n          //   child.rotation.y = Math.PI;\n          //   child.rotation.z = Math.PI;\n          // }\n        });\n\n        if (!scene) {\n          // Valid, but not supported by this viewer.\n          throw new Error(\n            \"파일에 Scene이 포함 되어있지 않거나, 3d 모델이 존재 하지 않습니다.\"\n          );\n        }\n\n        blobURLs.forEach(URL.revokeObjectURL);\n        // See: https://github.com/google/draco/issues/349\n        // DRACOLoader.releaseDecoderModule();\n        resolve(scene);\n      },\n      undefined,\n      reject\n    );\n  });\n};\n\n//const rootFile = file.name;\n\n// const fileURL =\n// typeof rootFile === \"string\" ? rootFile : URL.createObjectURL(rootFile);\n\n// const type = [\"GLTF\", \"OBJ\", \"FBX\"][\n// [\n//   file.name.match(/\\.(gltf|glb)$/),\n//   file.name.match(/\\.obj$/),\n//   file.name.match(/\\.fbx$/),\n// ].findIndex((b: RegExpMatchArray | null) => Boolean(b))\n// ];\n\n// console.log(file);\n// console.log(`${rootFile}, ${fileURL}, ${type}`);\n// if (type) {\n// alert(`${rootFile}, ${fileURL}, ${type}`);\n// }\n","import { LoaderType } from \"../type/model\";\n\n// 모델 로더\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\n// gui 텍스쳐 로딩\n// import { KTX2Loader } from \"three/examples/jsm/loaders/KTX2Loader.js\";\n// 압축 디코드 로더\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\n// 메쉬 압축 디코드 로더\n// import { MeshoptDecoder } from \"three/examples/jsm/libs/meshopt_decoder.module.js\";\n\nexport function getLoader({\n  type,\n  manager,\n}: {\n  type: LoaderType;\n  manager: any;\n}) {\n  const typeIndex = { gltf: 0, fbx: 1, obj: 2 }[type];\n\n  let loader = [\n    new GLTFLoader(manager)\n      .setCrossOrigin(\"anonymous\")\n      .setDRACOLoader(new DRACOLoader(manager).setDecoderPath(\"assets/wasm/\")),\n    new FBXLoader(manager).setCrossOrigin(\"anonymous\"),\n    new OBJLoader(manager).setCrossOrigin(\"anonymous\"),\n  ][typeIndex];\n\n  return loader;\n}\n","import styled from \"styled-components\";\n\nimport color from \"../../constants/color\";\n\nexport const Screen = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n`;\n\nexport const HtmlInterface = styled.div`\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: 1;\n`;\n\nexport const UploadInput = styled.input`\n  display: none;\n`;\n\nexport const CardDescription = styled.div`\n  margin-bottom: 16px;\n  color: ${color.black};\n`;\n\nexport const CardBox = styled.div`\n  border-radius: 4px;\n  padding: 8px;\n  background: rgba(0, 0, 0, 0.1);\n`;\n\nexport const SettingMenu = styled.div``;\nexport const SettingItemBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  cursor: pointer;\n`;\n","import React, { useState, useRef } from \"react\";\n\nimport { CheckBox } from \"../../component/CheckBox/index\";\nimport { TextButton } from \"../../component/Buttons\";\nimport ModelViewer, {\n  ModelViewerRef,\n  CameraInfo,\n} from \"../../component/ModelViwer\";\nimport color from \"../../constants/color\";\nimport {\n  Screen,\n  UploadInput,\n  CardDescription,\n  CardBox,\n  HtmlInterface,\n  SettingMenu,\n  SettingItemBox,\n} from \"./style\";\n\nimport { LoaderType } from \"../../type/model\";\n\nexport default function UploadScreen() {\n  const uploadInputRef = useRef<HTMLInputElement>(null);\n  const modelViewerRef = useRef<ModelViewerRef>(null);\n  const [labels, setLabels] = useState<Label[]>([]);\n  const labelCountRef = useRef(0);\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const file = event.target.files ? event.target.files[0] : undefined;\n\n    // load(fileMap) {\n    //   let rootFile;\n    //   let rootPath;\n\n    //   Array.from(fileMap).forEach(([path, file]) => {\n    //     // if (file.name.match(/\\.(gltf|glb)$/)) {\n    //     rootFile = file;\n    //     rootPath = path.replace(file.name, \"\");\n    //     // }\n    //   });\n\n    //   if (!rootFile) {\n    //     this.onError(\"No .gltf or .glb asset found.\");\n    //   }\n\n    //   this.view(rootFile, rootPath, fileMap);\n    // }\n\n    if (file) {\n      const type = getTypeOfFileUpload(file.name);\n\n      console.log(type, file.name);\n      if (!type) {\n        return alert(\"지원하지 않는 파일 입니다.\");\n      }\n\n      // console.log(\n      //   file,\n      //   URL.createObjectURL(file),\n      //   THREE.LoaderUtils.extractUrlBase(URL.createObjectURL(file)),\n      //   type,\n      //   uploadInputRef.current?.value,\n      //   uploadInputRef.current?.value.replace(file.name, \"\")\n      // );\n\n      // URL.revokeObjectURL(fileURL);\n\n      // file\n      const rootFile = file;\n      const rootPath =\n        uploadInputRef.current?.value.replace(file.name, \"\") || \"\";\n\n      const fileURL = URL.createObjectURL(rootFile);\n      const cleanup = () => {\n        URL.revokeObjectURL(fileURL);\n      };\n\n      console.log({ rootFile, rootPath });\n      modelViewerRef.current?.loadModel &&\n        modelViewerRef.current?.loadModel({ fileURL, rootPath, file, type });\n\n      cleanup();\n      // path.replace(file.name, \"\");\n      // this.view(rootFile, rootPath, fileMap, type);\n    }\n  };\n\n  // modelViewerRef.current?.camera;\n\n  const onAddLabels = () => {\n    const camera = modelViewerRef.current?.camera;\n    if (camera) {\n      const { rotation, position } = camera;\n\n      labelCountRef.current += 1;\n      const newLabel = {\n        name: `새 라벨 (${labelCountRef.current})`,\n        position: [position.x, position.y, position.z],\n        rotate: [rotation.x, rotation.y, rotation.z],\n        color: \"#\" + Math.round(Math.random() * 0xffffff).toString(16),\n      };\n      setLabels((prev) => [...prev, newLabel]);\n    }\n  };\n  const onDeleteLabels = (index: number) => {\n    setLabels((prev) => prev.filter((p, i) => i !== index));\n  };\n  const cameraMoveForLabel = (label: Label) => {\n    modelViewerRef.current?.setCamera &&\n      modelViewerRef.current?.setCamera(label);\n  };\n\n  return (\n    <Screen>\n      <HtmlInterface>\n        <CardBox style={{ margin: \"8px\" }}>\n          <CardDescription>\n            <h3>Labels !</h3>\n            <div>특정 카메라 위치를 라벨로 저장하세요!</div>\n            <div>라벨을 클릭하면 해당 위치로 이동합니다.</div>\n          </CardDescription>\n\n          <div>\n            <TextButton\n              style={{ marginBottom: labels.length > 0 ? \"16px\" : \"0px\" }}\n              color={color.lightMainColor}\n              onClick={() => onAddLabels()}\n            >\n              추가하기\n            </TextButton>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"8px\",\n              }}\n            >\n              {labels.map((label, i) => (\n                <LabelItem\n                  key={i}\n                  label={label}\n                  onClick={() => cameraMoveForLabel(label)}\n                  onDelete={() => onDeleteLabels(i)}\n                />\n              ))}\n            </div>\n          </div>\n        </CardBox>\n\n        <CardBox style={{ margin: \"8px\" }}>\n          <CardDescription>\n            <h3>Upload !</h3>\n            <div>업로드 버튼을 눌러 원하시는 3d 모델 파일을 선택하세요!</div>\n            <div>현재 obj, fbx, gltf, glb 파일을 지원 하고 있습니다.</div>\n          </CardDescription>\n\n          <UploadInput\n            ref={uploadInputRef}\n            onChange={onChange}\n            type=\"file\"\n            accept=\".gltf, .glb, .obj, .fbx\"\n          />\n\n          <TextButton\n            color={color.lightMainColor}\n            onClick={() => {\n              uploadInputRef.current?.click();\n              console.log(\"업로드 or 파일 선택 버튼 click\");\n            }}\n          >\n            {true ? \"업로드\" : \"파일 선택\"}\n          </TextButton>\n        </CardBox>\n        <CardBox style={{ margin: \"8px\" }}>\n          <CardDescription>\n            <h3>Option !</h3>\n            <div>다양한 옵션을 적용해서 모델을 보세요!</div>\n          </CardDescription>\n\n          <SettingMenu>\n            <SettingItem\n              text={\"자동 회전\"}\n              onClick={(b) => {\n                console.log(\n                  { modelViewerRef: modelViewerRef.current?.setAutoRotate },\n                  { ischeck: b }\n                );\n                modelViewerRef.current?.setAutoRotate &&\n                  modelViewerRef.current?.setAutoRotate(b);\n                // modelViewerRef.current\n              }}\n            />\n          </SettingMenu>\n        </CardBox>\n      </HtmlInterface>\n\n      {/* PerspectiveCamera */}\n      <ModelViewer ref={modelViewerRef} />\n    </Screen>\n  );\n}\n\n// label\nexport interface Label extends CameraInfo {\n  // id: number\n  name: string;\n  color: string;\n}\ninterface LabelItemProps {\n  label: Label;\n  onClick: () => void;\n  onDelete: () => void;\n}\nfunction LabelItem({ label, onClick, onDelete }: LabelItemProps) {\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <TextButton\n        style={{ flex: 1, justifyContent: \"space-between\" }}\n        color={label.color}\n        onClick={() => onClick()}\n      >\n        <div>{label.name}</div>\n      </TextButton>\n      <div\n        onClick={() => onDelete()}\n        style={{\n          padding: \"0px 4px 0px 8px\",\n          color: \"red\",\n          cursor: \"pointer\",\n        }}\n      >\n        X\n      </div>\n    </div>\n  );\n}\n\nexport function getTypeOfFileUpload(fileName: string): LoaderType | null {\n  const findIndex = [\n    fileName.match(/\\.(gltf|glb)$/),\n    fileName.match(/\\.obj$/),\n    fileName.match(/\\.fbx$/),\n  ].findIndex((b) => b);\n  return findIndex !== -1\n    ? ([\"gltf\", \"obj\", \"fbx\"][findIndex] as LoaderType)\n    : null;\n}\n\ninterface SettingItemProps {\n  text: string;\n  onClick: (b: boolean) => void;\n  initialState?: boolean;\n}\nfunction SettingItem({\n  text,\n  onClick,\n  initialState = false,\n}: SettingItemProps) {\n  const [check, setCheck] = useState(initialState);\n\n  const _onClick = () => {\n    onClick(!check);\n    setCheck(!check);\n  };\n\n  return (\n    <SettingItemBox>\n      <div\n        style={{ flexGrow: 1 }}\n        color={color.mainColor}\n        onClick={() => _onClick()}\n      >\n        {text}\n      </div>\n      <CheckBox size={15} onClick={() => _onClick()} check={check} />\n    </SettingItemBox>\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","import React from \"react\";\nimport { Router, Switch, Route } from \"react-router-dom\";\n\nimport UploadScreen from \"../Screen/Upload\";\nimport history from \"../utils/browserHistory\";\n\nexport default function Routes() {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/upload\" component={UploadScreen} />\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\n\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}